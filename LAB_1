
#include <bits/stdc++.h>
using namespace std;
// Node structure for a linked list
struct Node {
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

// Function to convert an array to a linked list
Node* arrayToLinkedList(int arr[], int size) {
    if (size <= 0)
        return nullptr;

    Node* head = new Node(arr[0]);
    Node* current = head;

    for (int i = 1; i < size; ++i) {
        current->next = new Node(arr[i]);
        current = current->next;
    }

    return head;
}

// Function to remove duplicates from a linked list
void removeDuplicates(Node* head) {
    if (!head || !(head->next))
        return;

    Node* current = head;

    while (current) {
        Node* runner = current;

        // Remove all future nodes that have the same value
        while (runner->next) {
            if (runner->next->data == current->data) {
                Node* temp = runner->next;
                runner->next = runner->next->next;
                delete temp;
            } else {
                runner = runner->next;
            }
        }

        current = current->next;
    }
}

// Function to print the linked list
void printList(Node* head) {
    while (head) {
        std::cout << head->data << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

int main() {
    int arr[] = {1, 2, 3, 2, 4, 5, 6, 3, 7, 8, 9, 1};
    int size = sizeof(arr) / sizeof(arr[0]);

    // Convert array to linked list
    Node* head = arrayToLinkedList(arr, size);

    std::cout << "Original linked list: ";
    printList(head);

    // Remove duplicates
    removeDuplicates(head);

    std::cout << "Linked list after removing duplicates: ";
    printList(head);

    return 0;
}
